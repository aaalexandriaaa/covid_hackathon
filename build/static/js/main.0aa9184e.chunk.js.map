{"version":3,"sources":["components/NavBar/NavBar.jsx","services/authService.js","components/SignupForm/SignupForm.jsx","pages/Signup/Signup.jsx","pages/Login/Login.jsx","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["NavBar","user","handleLogout","className","id","href","name","signup","fetch","BASE_URL","method","headers","Headers","body","JSON","stringify","then","res","console","log","json","token","Error","err","data","SignupForm","state","email","password","passwordConf","handleChange","e","props","updateMessage","setState","target","value","handleSubmit","a","history","preventDefault","authService","push","message","this","autoComplete","onSubmit","type","onChange","htmlFor","disabled","isFormInvalid","to","Component","Signup","msg","LoginPage","pw","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0aa9184e.chunk.js","sourcesContent":["import React from 'react';\n\nconst NavBar = ({ user, handleLogout }) => {\n    return (\n    <>\n      {user ?\n        <nav>\n          <div className=\"nav-wrapper\">\n            <ul id=\"nav-mobile\" className=\"right\">\n              <li><a href=\" \" className=\"nav-link\">Welcome, {user.name}</a></li>\n              {/* <li><a href=\"/users\" className=\"nav-link\">Users</a></li> */}\n            </ul>\n          </div>\n        </nav>\n      :\n        <nav>\n          <div className=\"nav-wrapper\">\n            <ul id=\"nav-mobile\" className=\"right\">\n              <li><a href=\"/login\" className=\"nav-link\">Log In</a></li>\n              {/* <li><a href=\"/users\" className=\"nav-link\">Users</a></li> */}\n              <li><a href=\"/signup\" className=\"nav-link\">Sign Up</a></li>\n            </ul>\n          </div>\n        </nav>\n      }\n    </>\n  )\n}\n\nexport default NavBar;\n","const BASE_URL = '/api/auth/';\n\nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(user)\n  })\n  .then(res => {\n    console.log(res, '<-- response object')\n    return res.json();\n  })\n  .then(json => {\n    if(json.token) return json;\n    console.log(json, '<-- the error')\n    throw new Error(`${json.err}`)\n  })\n  .then(data => data)\n}\n\nexport default {\n  signup\n};","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport authService from \"../../services/authService\";\n\nclass SignupForm extends Component {\n  state = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    passwordConf: \"\",\n  };\n\n  handleChange = (e) => {\n    this.props.updateMessage(\"\");\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleSubmit = async (e) => {\n    const { history, updateMessage } = this.props;\n    e.preventDefault();\n    try {\n      await authService.signup(this.state);\n      history.push(\"/\");\n    } catch (err) {\n      updateMessage(err.message);\n    }\n  };\n\n  isFormInvalid() {\n    const { name, email, password, passwordConf } = this.state;\n    return !(name && email && password === passwordConf);\n  }\n\n  render() {\n    const { name, email, password, passwordConf } = this.state;\n    return (\n      <div>\n        <h3>Sign Up</h3>\n        <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            autoComplete=\"off\"\n            id=\"name\"\n            value={name}\n            name=\"name\"\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"name\">Name</label>\n          <input\n            type=\"text\"\n            autoComplete=\"off\"\n            id=\"email\"\n            value={email}\n            name=\"email\"\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"password\"\n            autoComplete=\"off\"\n            id=\"password\"\n            value={password}\n            name=\"password\"\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            autoComplete=\"off\"\n            id=\"confirm\"\n            value={passwordConf}\n            name=\"passwordConf\"\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"confirm\">Confirm Password</label>\n          <button disabled={this.isFormInvalid()}>Sign Up</button>\n          &nbsp;&nbsp;\n          <Link to=\"/\">Cancel</Link>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SignupForm;\n","import React, { Component } from 'react';\nimport SignupForm from '../../components/SignupForm/SignupForm';\nimport './Signup.css';\n\nclass Signup extends Component {\n  state = {\n    message: ''\n  }\n\n  updateMessage = (msg) => {\n    this.setState({message: msg});\n  }\n\n  render() {\n    return (\n      <main>\n        <SignupForm {...this.props} updateMessage={this.updateMessage} />\n        <p>{this.state.message}</p>\n      </main>\n    );\n  }\n}\n\nexport default Signup;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Login.css\";\n\nclass LoginPage extends Component {\n  state = {\n    email: \"\",\n    pw: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n  };\n\n  render() {\n    const {email, pw} = this.state\n    return (\n      <main className=\"Login\">\n        <h3>Log In</h3>\n        <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            autoComplete=\"off\"\n            id=\"email\"\n            value={email}\n            name=\"email\"\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"password\"\n            autoComplete=\"off\"\n            id=\"password\"\n            value={pw}\n            name=\"pw\"\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"password\">Password</label>\n          <button className=\"btn green\">Log In</button>&nbsp;&nbsp;&nbsp;\n          <Link className=\"btn red\" to=\"/\">\n            Cancel\n          </Link>\n        </form>\n      </main>\n    );\n  }\n}\n\nexport default LoginPage;\n","import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport NavBar from \"../../components/NavBar/NavBar\";\nimport Signup from \"../Signup/Signup\";\nimport Login from \"../Login/Login\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {};\n\n  render() {\n    return (\n      <>\n        <NavBar user={this.state.user} />\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <main>\n              <h1>Welcome. This is an authorization template.</h1>\n            </main>\n          )}\n        />\n        <Route\n          exact\n          path=\"/signup\"\n          render={({ history }) => (\n            <Signup\n              history={history}\n            />\n          )}\n        />\n        <Route\n          exact\n          path=\"/login\"\n          render={({ history }) => (\n            <Login\n              history={history}\n            />\n          )}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./pages/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <Route render={({ history }) => <App history={history} />} />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}